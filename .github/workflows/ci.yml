name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      run: go build -o gocrafter ./cmd
      
    - name: Test template generation
      run: |
        ./gocrafter list
        ./gocrafter info api-rest
        
    - name: Test project creation
      run: |
        ./gocrafter new test-api --template api-rest --quick
        cd test-api
        go mod tidy
        go build
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        mkdir -p dist
        if [ "${{ matrix.os }}" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/gocrafter-${{ matrix.os }}-${{ matrix.arch }}.exe ./cmd
        else
          go build -ldflags="-s -w" -o dist/gocrafter-${{ matrix.os }}-${{ matrix.arch }} ./cmd
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gocrafter-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/
        
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist/
        
    - name: Create release packages
      run: |
        cd dist
        for dir in */; do
          cd "$dir"
          if [[ "$dir" == *"windows"* ]]; then
            zip -r "../${dir%/}.zip" .
          else
            tar -czf "../${dir%/}.tar.gz" .
          fi
          cd ..
        done
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.{tar.gz,zip}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          rafamori/gocrafter:latest
          rafamori/gocrafter:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
